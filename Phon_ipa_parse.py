# -*- coding: utf-8 -*-
"""
Created on Thu Aug  6 11:21:12 2020
@author: Philip Combiths

Parses Phon's ipa.xml reference file, extracting all valid IPA symbols by
group and exports result to csv file.

# XML references for navigation:
root[#] = char
root[#][0] = name
root[#][1] = token
char.attrib.values()

# Example use case:
xml_path=r"C:/Users/Philip/Documents/GitHub/phon/RESOURCES/parser/ipa.xml"
char_group_dict = get_Phon_char_list(xml_path=xml_path)
chars_df = chars_to_csv(char_group_dict)
"""

import pandas as pd
import os
import xml.etree.ElementTree as etree
from contextlib import contextmanager


# Create contextmanager decorator
@contextmanager
def change_dir(newdir):
    prevdir = os.getcwd()
    try:
        yield os.chdir(os.path.expanduser(newdir)) 
    finally:
        os.chdir(prevdir)
        print("Returned to directory:", os.getcwd())

        
def get_Phon_char_list(list_types='all', xml_path="ipa.xml"):
    """
    Extracts IPA characters from Phon's ipa.xml reference file.
    
    Args:
        list_types : list of any of strs in ['consonants', 'glides', 
            'vowels', 'diacritics', 'others'] for characters to extract, or 
            str 'all' for all types. Default='all'
        xml_path : str path name for Phon's "ipa.xml". Default requires
            "ipa.xml" located in current working directory.
    
    Require xml.etree.ElementTree as etree
    
    Returns dict of character lists
    """
    if list_types == 'all':
        list_types = ['consonants', 'glides', 'vowels', 'diacritics', 'others']

    
    tree = etree.parse(xml_path)
    root = tree.getroot()
    
    cons_list = []
    glides_list = []
    vowels_list = []
    diacritics_list = []
    others_list = []
    char_group_dict = {'consonants':cons_list, 'glides':glides_list, 
                   'vowels':vowels_list, 'diacritics':diacritics_list, 
                   'others':others_list}
 
    for char in root:
        # Extract consonants
        if char[1].text == 'CONSONANT':
            cons_list.append((char.get('value'), char[0].text, char[1].text))
        # Extract glides
        elif char[1].text == 'GLIDE':
            glides_list.append((char.get('value'), char[0].text, char[1].text))
        # Extract vowels
        elif char[1].text == 'VOWEL':
            vowels_list.append((char.get('value'), char[0].text, char[1].text))
        # Extract diacritics
        elif any(x == char[1].text for x in ['SUFFIX_DIACRITIC', 
                 'COMBINING_DIACRITIC', 'LIGATURE', 'PREFIX_DIACRITIC', 
                 'ROLE_REVERSAL', 'SANDHI']):
            diacritics_list.append((char.get('value'), 
                                    char[0].text, char[1].text))
        elif any(x in char[0].text for x in ['Modifier Letter', 
                 'MODIFIER LETTER', 'Superscript', 'Combining']):
            diacritics_list.append((char.get('value'), 
                                    char[0].text, char[1].text))
        # Extract covers and others
        else:
            others_list.append((char.get('value'), char[0].text, char[1].text))

    diacritics_list = list(set(diacritics_list))
    print('IPA symbol lists created.')
    return char_group_dict

def chars_to_csv(char_group_dict, user_set_save_dir=False):        
    """
    Saves dictionary of character lists to csv.
    
    Args:
        char_group_dict : dict of character lists, generated by 
            get_Phon_char_list()
        user_set_save_dir : bool. False uses default current working directory,
            True triggers request for user input of save path. Default=False
    
    Generates csv from dictionary of character lists.
    
    Returns DataFrame from dictionary of character lists.
    """
    if user_set_save_dir:
        save_dir = os.path.normpath(input('Enter csv save directory path: '))
    else:
        save_dir = os.getcwd()
    save_filename = 'Phon_legal_chars.csv'
    save_path = os.path.join(save_dir, save_filename)
    with change_dir(os.path.normpath(save_dir)):
        chars_df = pd.DataFrame()
        for group in char_group_dict:
            temp_df = pd.DataFrame(char_group_dict[group], columns=['IPA', 'name', 'token'])
            temp_df['category'] = group
            
            chars_df = chars_df.append(temp_df, ignore_index=True)
            
        chars_df.to_csv(save_path, encoding = 'utf-8', index=False)
        print(f"{save_filename} saved.\nSave dir: {save_path}")
    print('Done.')
    return chars_df